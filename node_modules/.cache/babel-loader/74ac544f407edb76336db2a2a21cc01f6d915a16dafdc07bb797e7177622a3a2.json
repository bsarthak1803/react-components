{"ast":null,"code":"var _jsxFileName = \"/Users/sarbhard/Box Sync/per_projects/react-components/src/Components/InfiniteScroll/InfiniteScroll.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InfiniteScroll = () => {\n  _s();\n  const [products, setProducts] = useState([]); //state for products list\n  const [hasMore, setHasMore] = useState(true); //flag to check if there is more data to be fetched\n  const [page, setPage] = useState(0); //state to store current page number\n\n  const lastProductRef = useRef(null); //stores the ref to the last div element which we would be observing\n\n  const fetchMoreItems = async () => {\n    try {\n      const response = await fetch(`https://dummyjson.com/products?limit=${50}&skip=${page * 50}`);\n      const data = await response.json();\n      if (data.products.length === 0) setHasMore(false);\n      //if the data has no further products then set has more to false\n      else {\n        setProducts(prevProducts => [...prevProducts, ...data.products]); //add the new products to the existing products list\n        setPage(prevPage => prevPage + 1);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const intersectionCallback =\n  //callback function for IntersectionObserver interface\n  enteries => {\n    const firstEntry = enteries[0];\n    if (firstEntry.isIntersecting && hasMore) fetchMoreItems();\n  };\n  useEffect(() => {\n    const observer = new IntersectionObserver(intersectionCallback);\n    if (observer && lastProductRef.current) observer.observe(lastProductRef.current);\n    return () => {\n      //component will unmount\n      //cleanup function\n      if (observer) observer.disconnect();\n    };\n  }, [products]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [products.map(({\n        id,\n        title\n      }) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: title\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 18\n        }, this);\n      }), hasMore && /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: lastProductRef,\n        children: \"Load More Items....!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(InfiniteScroll, \"yR7/W7lK5cjNTSY1zDvAABmI0YI=\");\n_c = InfiniteScroll;\nexport default InfiniteScroll;\nvar _c;\n$RefreshReg$(_c, \"InfiniteScroll\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useRef","jsxDEV","_jsxDEV","InfiniteScroll","_s","products","setProducts","hasMore","setHasMore","page","setPage","lastProductRef","fetchMoreItems","response","fetch","data","json","length","prevProducts","prevPage","err","console","log","intersectionCallback","enteries","firstEntry","isIntersecting","observer","IntersectionObserver","current","observe","disconnect","style","display","flexDirection","justifyContent","children","map","id","title","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/sarbhard/Box Sync/per_projects/react-components/src/Components/InfiniteScroll/InfiniteScroll.jsx"],"sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from \"react\";\n\nconst InfiniteScroll = () => {\n  const [products, setProducts] = useState([]); //state for products list\n  const [hasMore, setHasMore] = useState(true); //flag to check if there is more data to be fetched\n  const [page, setPage] = useState(0); //state to store current page number\n\n  const lastProductRef = useRef(null); //stores the ref to the last div element which we would be observing\n\n  const fetchMoreItems = async () => {\n    try {\n      const response = await fetch(\n        `https://dummyjson.com/products?limit=${50}&skip=${page * 50}`\n      );\n      const data = await response.json();\n      if (data.products.length === 0) setHasMore(false);\n      //if the data has no further products then set has more to false\n      else {\n        setProducts((prevProducts) => [...prevProducts, ...data.products]); //add the new products to the existing products list\n        setPage((prevPage) => prevPage + 1);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const intersectionCallback =\n    //callback function for IntersectionObserver interface\n    (enteries) => {\n      const firstEntry = enteries[0];\n      if (firstEntry.isIntersecting && hasMore) fetchMoreItems();\n    };\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(intersectionCallback);\n    if (observer && lastProductRef.current)\n      observer.observe(lastProductRef.current);\n\n    return () => {\n      //component will unmount\n      //cleanup function\n      if (observer) observer.disconnect();\n    };\n  }, [products]);\n\n  return (\n    <main\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n      }}\n    >\n      <ul>\n        {products.map(({ id, title }) => {\n          return <li key={id}>{title}</li>;\n        })}\n        {hasMore && <div ref={lastProductRef}>Load More Items....!!</div>}\n      </ul>\n    </main>\n  );\n};\n\nexport default InfiniteScroll;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}